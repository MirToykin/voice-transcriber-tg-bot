// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package db

import (
	"context"
	"database/sql"
)

const deleteProcessedEvents = `-- name: DeleteProcessedEvents :exec
DELETE FROM events WHERE processed = 1
`

func (q *Queries) DeleteProcessedEvents(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteProcessedEvents)
	return err
}

const fetchUnprocessedEvents = `-- name: FetchUnprocessedEvents :many
SELECT id, type, file_path, file_size, text, meta FROM events WHERE processed = 0 LIMIT ?
`

type FetchUnprocessedEventsRow struct {
	ID       int64
	Type     int64
	FilePath sql.NullString
	FileSize sql.NullInt64
	Text     sql.NullString
	Meta     sql.NullString
}

func (q *Queries) FetchUnprocessedEvents(ctx context.Context, limit int64) ([]FetchUnprocessedEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchUnprocessedEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchUnprocessedEventsRow
	for rows.Next() {
		var i FetchUnprocessedEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.FilePath,
			&i.FileSize,
			&i.Text,
			&i.Meta,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveUnprocessedEvent = `-- name: SaveUnprocessedEvent :exec
INSERT INTO events (type, file_path, file_size, text, meta, processed)
values (?, ?, ?, ?, ?, 0)
`

type SaveUnprocessedEventParams struct {
	Type     int64
	FilePath sql.NullString
	FileSize sql.NullInt64
	Text     sql.NullString
	Meta     sql.NullString
}

func (q *Queries) SaveUnprocessedEvent(ctx context.Context, arg SaveUnprocessedEventParams) error {
	_, err := q.db.ExecContext(ctx, saveUnprocessedEvent,
		arg.Type,
		arg.FilePath,
		arg.FileSize,
		arg.Text,
		arg.Meta,
	)
	return err
}

const setEventProcessed = `-- name: SetEventProcessed :exec
UPDATE events SET processed = 1 WHERE id = ?
`

func (q *Queries) SetEventProcessed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setEventProcessed, id)
	return err
}
