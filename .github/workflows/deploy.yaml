name: CI

on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: ${{ vars.REGISTRY }}
  IMAGE_NAME: "transcriber-bot"
  CONTAINER_NAME: "transcriber-bot-container"
  ENV_FILE: ${{ secrets.ENV_FILE }}
  DB_DSN: ${{ secrets.DB_DSN }}

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f Dockerfile . 

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,ENV_FILE,DB_DSN
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # go to project directory
            cd ${{ vars.SERVICE_PATH }}
            
            # create .env
            echo "TAG_NAME=$TAG_NAME" > .env
            echo "$ENV_FILE" >> .env
            echo "DB_DSN=./storage/$DB_DSN" >> .env
            
            if [ ! -f "${{ vars.SERVICE_PATH }}/storage/$DB_DSN" ]; then
              echo "Storage doesn't exist. Creating storage file..."
              mkdir -p "$(dirname "${{ vars.SERVICE_PATH }}/storage/")"
              touch "${{ vars.SERVICE_PATH }}/storage/$DB_DSN"
            else
              echo "Storage file already exists. Skipping creation."
            fi
            
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME
            docker run --name $CONTAINER_NAME --env-file .env -v ${{ vars.SERVICE_PATH }}/storage/:/root/storage/ -d $REGISTRY/$IMAGE_NAME:$TAG_NAME